[ { "title": "[Live Study] 15주차 과제: 람다식", "url": "/posts/java-livestudy-15week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, lambda", "date": "2021-03-06 16:11:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 람다식에 대해 학습하세요.람다식 사용법람다식은 자바8에서 도입된 기능으로 자바 플랫폼에 큰 변화를 주었습니다. 더 표현력있는 프로그래밍 더 좋은 라이브러리 간결한 코드 향상된 프로그래밍 안전성 ..." }, { "title": "[Live Study] 14주차 과제: 제네릭", "url": "/posts/java-livestudy-14week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, generic", "date": "2021-03-01 13:43:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 제네릭에 대해 학습하세요.제네릭 사용법제네릭(Generic)은 자바에서 유용한 기능 중 하나로 특히 공통 데이터 구조를 만들 때 주로 사용 됩니다.List&amp;lt;String&amp;gt; hob..." }, { "title": "[Live Study] 13주차 과제: I/O", "url": "/posts/java-livestudy-13week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, io", "date": "2021-02-27 20:17:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 Input과 Output에 대해 학습하세요.스트림(Stream), 버퍼(Buffer), 채널(Channel) 기반의 I/O스트림(Stream)I/O 스트림(Stream)은 디스크 또는 기타 소스의 순차..." }, { "title": "[Live Study] 12주차 과제: 애노테이션", "url": "/posts/java-livestudy-12week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, annotation", "date": "2021-02-05 19:03:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 애노테이션에 대해 학습하세요.애노테이션이란?애노테이션(annotation)은 자바의 특수한 인터페이스 이며 기본적으로 이름처럼 주석을 다는 역할을 합니다.다만 일반적인 주석과는 다르게 추가적인 작업을 ..." }, { "title": "[Live Study] 11주차 과제: Enum", "url": "/posts/java-livestudy-11week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, enum", "date": "2021-01-29 21:12:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 열거형에 대해 학습하세요.Enum 이란?Enum은 제한된 기능을 까지고 허용하는 값이 적은 클래스의 변형된 유형입니다.흔히 열거형 클래스라고도 하며 어떤 데이터 집합에서 유일한 값을 표현할 때 사용할 ..." }, { "title": "[Live Study] 10주차 과제: 멀티스레드 프로그래밍", "url": "/posts/java-livestudy-10week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, thread", "date": "2021-01-24 10:05:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 멀티스레드 프로그래밍에 대해 학습하세요.프로세스와 스레드https://www.javaquery.com/2016/07/what-is-difference-between-process-and.html프로세스..." }, { "title": "[Live Study] 9주차 과제: 예외 처리", "url": "/posts/java-livestudy-9week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, exception", "date": "2021-01-10 18:05:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 예외 처리에 대해 학습하세요.Error / Exception자바 예외의 계층 구조 (출처: https://www.geeksforgeeks.org/exceptions-in-java/) 계층 구조를 보시..." }, { "title": "[Live Study] 8주차 과제: 인터페이스", "url": "/posts/java-livestudy-8week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, interface", "date": "2021-01-04 18:05:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 인터페이스에 대해 학습하세요.인터페이스를 정의하는 방법인터페이스란?자바는 클래스를 하나만 상속이 가능한 특성이 있는데 이는 객체지향 프로그래밍에서 큰 제약이기 때문에 인터페이스(Interface)라는 ..." }, { "title": "[Live Study] 7주차 과제: 패키지", "url": "/posts/java-livestudy-7week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, package", "date": "2020-12-28 21:10:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 패키지에 대해 학습하세요.package 키워드패키지란? 패키지란 여러분이 만든 클래스나 인터페이스 등을 모은 단위 입니다. 관련 클래스를 그룹화하고 포함된 클래스의 네임스페이스를 정의하는 역할 입니..." }, { "title": "[Live Study] 6주차 과제: 상속", "url": "/posts/java-livestudy-6week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, inheritance", "date": "2020-12-26 10:22:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 상속에 대해 학습하세요.자바 상속의 특징 자식 클래스는 부모 클래스의 내용을 상속할 수 있습니다. 서브 클래스에서 별도의 내용을 가질 수 있습니다. 자식 클래스는 부모 클래스를 알 수 있지만 부모..." }, { "title": "[Live Study] 5주차 과제: 클래스", "url": "/posts/java-livestudy-5week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, class", "date": "2020-12-19 17:22:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 class에 대해 학습하세요.클래스 정의하는 방법클래스란 객체를 만들어서 사용할 수 있는 설계도나 틀로 이해할 수 있습니다.클래스는 데이터와 기능으로 구성되어 있으며 데이터는 필드로 정의하고 기능은 메..." }, { "title": "[Live Study] 4주차 과제: 제어문", "url": "/posts/java-livestudy-4week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, operator", "date": "2020-12-07 22:57:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바가 제공하는 제어문을 학습하세요.선택문if / else if / elseifif 문은 자바가 결정을 내릴 수 있도록 하는 근본적인 제어문 중 하나 입니다.조건부로 문장(statement)을 실행하기 위해 ..." }, { "title": "[Live Study] 3주차 과제: 연산자", "url": "/posts/java-livestudy-3week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, operator", "date": "2020-11-23 19:57:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바가 제공하는 다양한 연산자를 학습하세요.산술 연산자산술 연산자(Arithmetic Operators)는 정수, 부동소수점, 문자열 등 boolean 타입을 제외한모든 Primitive Type에서 사용이 ..." }, { "title": "[Live Study] 2주차 과제: 자바 데이터 타입, 변수 그리고 배열", "url": "/posts/java-livestudy-2week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, type, variable, array", "date": "2020-11-21 22:04:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바의 프리미티브 타입, 변수 그리고 배열을 사용하는 방법을 익힙니다.프리미티브 타입 종류와 값의 범위 그리고 기본 값 타입 설명 기본값 크기 범위 ..." }, { "title": "[Live Study] 1주차 과제: JVM은 무엇이며 자바 코드는 어떻게 실행하는 것인가.", "url": "/posts/java-livestudy-1week/", "categories": "Java, Live Study", "tags": "java, livestudy, whiteship, jvm", "date": "2020-11-17 21:18:00 +0900", "snippet": "이 스터디는 백기선님께서 Github와 유튜브로 진행하시는 스터디 입니다.참여하시고 싶으신 분은 아래 링크를 참고해 주세요 :)대부분의 내용은 [O’REILLY] Java in a Nutshell, 7th Edition 에서 참고 하였습니다.(최대한 직접 해석하면서 읽고 있으며 모르는 단어는 번역기로 찾았습니다.)학습 목표자바 소스 파일(.java)을 JVM으로 실행하는 과정 이해하기JVM이란 무엇인가 JVM은 Java Virtual Machine의 약자로 자바 바이트코드를 실행하기 위한 환경을 제공하는 프로그램입니다. 한..." }, { "title": "[Leaning Scala] Chapter9. 트레이트", "url": "/posts/scala-learning-scala-chapter9-2/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-10-17 10:36:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677트레이트 (trait)트레이트는 다중 상속을 가능하게 하는 스칼라의 유형 중 하나 입니다.다른 클래스 유형과 마찬가지로 트레이트는 하나 이상의 클래스를 확장할 수는 없지만 동시에 여러 트레이트를 확장할 수는 있습니다.트레이트는 직접 인스턴스화가 될 수 없고 클래스 매개변수를 가질 수는 없지만 타입 매개변수를 사용할 수 있어 재사용성이 뛰어납니다.// 트레이트 정의trait Article { def publish()}//..." }, { "title": "[Leaning Scala] Chapter9. Object, 케이스 클래스", "url": "/posts/scala-learning-scala-chapter9-1/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-10-11 16:17:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677Object서적에는 객체로 설명되어 있으나 클래스를 통햇 생성되는 객체(instance)와 혼동될 여지가 있어 영어인 Object로 명시 하겠습니다.Object는 하나 이상의 인스턴스를 가질 수 없는 형태의 클래스이며 객체지향적으로 싱글턴(singleton)이라고 합니다.자바 등 다른 객체지향 언어에서는 정적(static)이거나 전역(global)로 선언할 수 있으며 코틀린의 object와는 비슷합니다.Object는 따로..." }, { "title": "[Learning Scala] Chapter8. 클래스", "url": "/posts/scala-learning-scala-chapter8/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-23 10:53:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677이전 포스팅까지는 스칼라의 핵심적인 기능과 사용 방법에 대해 알아봤고 이제 스칼라로 객체지향 개발을 하도록 제공되는 기능들을 알아보려고 합니다.먼저 가장 기본적인 클래스에 대해 알아보겠습니다. 다만 이번 포스팅은 기존에 자바 등 객체지향 언어에서 클래스를 사용해본 경험이 있다는 전제 하에 설명하려 합니다.서적에는 스칼라의 클래스에 대한 다양한 내용이 있지만 기본적인 사용법과 자바 클래스와의 차이점 위주로 설명드리겠습니다..." }, { "title": "[Learning Scala] Chapter7. 그 외의 컬렉션 (모나딕 컬렉션)", "url": "/posts/scala-learning-scala-chapter7-2/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-16 10:16:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677모나딕 컬렉션(monadic collection) 이란 Iterable 연산과 비슷한 변형 연산은 지원하지만하나 이상의 요소를 포함할 수 없는 컬렉션을 말합니다.Option 컬렉션크기가 1인 컬렉션이며 값의 존재 여부를 나타내며 null의 안전한 처리를 하는데 사용되는 경우가 많습니다.또한 자바의 Optional과 비슷하다고 볼 수 있습니다.하나의 값에 대한 여러 연산 체인이 있을 때 이 연산들을 안전하게 처리하는데 좋은..." }, { "title": "[Learning Scala] Chapter7. 그 외의 컬렉션 (가변, 배열, 시퀀스)", "url": "/posts/scala-learning-scala-chapter7-1/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-15 21:05:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677이전 포스팅에서 보편적인 컬렉션인 List, Set, Map에 대해 알아봤습니다.이 세 컬렉션은 모두 불변의 타입이며 List는 순서가 있는 컬렉션이고 Set과 Map은 순서가 없는 컬렉션 입니다.위 세 컬렉션을 제외한 다른 컬렉션에 대해 알아보겠습니다.가변적인 컬렉션불변의 타입을 가진 컬렉션은 요소를 추가, 변경, 삭제가 불가능하지만 가변적인 컬렉션을 사용하여 처리할 수 있습니다.불변 타입의 컬렉션과 대응되는 가변 컬렉..." }, { "title": "[Learning Scala] Chapter6. 보편적인 컬렉션 (2)", "url": "/posts/scala-learning-scala-chapter6-2/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-08 09:58:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677이전 포스팅에서 기본적인 컬렉션에 대해 알아보았습니다.이번 포스팅에서는 앞서 공부한 컬렉션들에 대해 조금 더 디테일한 기능에 대해 알아보겠습니다.(List 컬렉션을 중점으로 두고 작성하겠습니다.)List에는 무엇이 있는가?List 정의하기리스트를 정의하는 법은 다양하게 있지만 간단하게 몇가지를 알아보겠습니다.// 빈 리스트 선언 (리스트 타입을 지정해줘야합니다.)val list = List[String]() // Str..." }, { "title": "[Learning Scala] Chapter6. 보편적인 컬렉션 (1)", "url": "/posts/scala-learning-scala-chapter6-1/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-07 17:00:00 +0900", "snippet": "이 글은 러닝 스칼라를 기반으로 작성 되었습니다.출처 : https://jpub.tistory.com/677스칼라는 JVM 기반 언어이므로 기본적으로 자바 컬렉션이 사용이 가능합니다.하지만 추가적으로 스칼라만의 다양한 고차 연산도 있있습니다.대부분 Iterable의 서브타입이고 컬렉션 데이터를 처리하는 메소드들을 제공합니다.ListList는 불변의 단방향 연결 리스트입니다.List를 가볍게 아래와 같이 사용해 볼 수 입습니다.val list: List[Int] = List(11, 30, 10, 21) // List.apply(..." }, { "title": "[Learning Scala] Chapter5. 일급 함수", "url": "/posts/scala-learning-scala-chapter5/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-07 10:20:00 +0900", "snippet": "출처 : https://jpub.tistory.com/677이 글은 러닝 스칼라를 기반으로 작성 되었습니다.일급 함수란? 함수가 선언되고 호출되는 것 외에 다른 데이터 타입처럼 사용될 수 있는 것. 식별자에 할당되지 않고도 리터럴 형태로 생성될 수 있음. 값, 변수 데이터 구조처럼 컨테이너에 저장될 수 있음. 다른 함수의 매개변수로 사용되거나 다른 함수의 반환값으로 사용될 수 있음. (고차 함수: higher-order function)함수 타입과 값함수의 타입은 입력 타입과 반환 값 타입의 단순한 그룹입니다.일반적인 ..." }, { "title": "[Learning Scala] Chapter4. 함수", "url": "/posts/scala-learning-scala-chapter4/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-06 09:38:00 +0900", "snippet": "출처 : https://jpub.tistory.com/677이 글은 러닝 스칼라를 기반으로 작성 되었습니다.스칼라의 함수 (function)스칼라에서 함수는 이름을 가진, 재활용 가능한 표현식입니다.함수는 매개변수화할 수도 있고 값을 반환할 수도 있지만 이 어느 것도 필수는 아니지만 이 특징들은 재사용과 구성력을 최대화 합니다.더 짧고, 더 가독성이 높고, 더 안정적인 어플리케이션을 작성할 수 있도록 해주며 매개변수화 된 함수를 사용하여 정규화된다면 테스트하기도 쉬워집니다.함수형 프로그래밍 언어스칼라는 함수형 프로그래밍 언어 ..." }, { "title": "[Learning Scala] Chapter3. 표현식과 조건문", "url": "/posts/scala-learning-scala-chapter3/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-04 17:02:00 +0900", "snippet": "출처 : https://jpub.tistory.com/677이 글은 러닝 스칼라를 기반으로 작성 되었습니다.표현식 (Expression) 표현식은 실행 후 값을 반환하는 코드 단위를 말함. 기존 데이터를 변경하는 대신 값을 반환할 수 있기 때문에 함수형 프로그래밍의 기반이 됨.// 누구나 할 수 있지만 이 자체가 표현식이라는 개념을 설명하기 위해...&quot;hello&quot; // hello&quot;he&quot; + &quot;ll&quot; + &quot;o&quot; // hello표현식 블록 (Expressi..." }, { "title": "[Learning Scala] Chapter2. 데이터로 작업하기: 리터럴, 값, 변수, 타입", "url": "/posts/scala-learning-scala-chapter2/", "categories": "Scala, Learning Scala", "tags": "scala, learningscala", "date": "2020-09-04 13:38:00 +0900", "snippet": "출처 : https://jpub.tistory.com/677이 글은 러닝 스칼라를 기반으로 작성 되었습니다.스칼라 데이터의 정의 값 불변의 타입 재할당 불가 리터럴 (리터럴 데이터) 숫자, 문자, 텍스트 등 데이터 변수 가변 타입 재할당 가능 타입 데이터의 종류, 데이터의 정의 또는 분류 스칼라의 모든 데이터는 특정 타입에 대응 모든 스칼라 타입은 데이터와 그 데이터를 처리하는 메소드를 갖..." }, { "title": "[JPA] Spring Data JPA와 Querydsl (feat. Spring MVC)", "url": "/posts/jpa-querydsl/", "categories": "JPA", "tags": "jpa, querydsl", "date": "2020-02-18 00:18:00 +0900", "snippet": "EntityListener@PrePersist@PostPersist@PreUpdate@PostUpdate@PreRemove@PostRemove@PostLoadAttributeConverter@Converterclass SnackNutrientConverter : AttributeConverter&amp;lt;SnackNutrient, String&amp;gt; { private val mapper = jacksonObjectMapper() override fun convertToDatabaseColumn(attrib..." }, { "title": "[JPA] 엔티티 작성 시 주의 사항 (feat. 스프링 부트, 코틀린)", "url": "/posts/jpa-entity/", "categories": "JPA", "tags": "jpa, entity", "date": "2020-02-06 22:17:00 +0900", "snippet": "단일 데이터 소스를 사용하고 특별한 조건이 없으면서 스프링 부트를 사용한다면 JPA를 설정하는 것은 매우 간편합니다.그러나 기본적인 엔티티 작성 방법 외에 사용 시 주의해야 할 사항들이 있어 정리해봅니다.개인적인 관점에서 필요하다 생각하는 주의 사항이므로 잘못된 방법이라면 댓글로 지적 부탁드립니다.또는 추가적으로 주의 사항이 있다면 댓글로 정보를 주시면 감사드리겠습니다.엔티티 작성 가이드 @Entity 애노테이션을 사용해야 합니다. public 혹은 protected 접근자의 기본 생성자가 필요합니다. 탑 레벨 클래스이어..." }, { "title": "[JPA] 영속성 컨텍스트 (Persistence Context) 특징", "url": "/posts/jpa-persistence-context/", "categories": "JPA", "tags": "jpa, persistence", "date": "2020-01-12 18:26:00 +0900", "snippet": "먼저 JPA란 Java Persistence API의 약자로 자바 ORM 기술에 대한 API 표준 명세이며 대표적인 구현체로는 Hibernate가 있습니다.JPA에서 가장 중요한 개념 중 하나인 영속성 컨텍스트(Persistence Context)의 특징에 대해 함께 알아보겠습니다.특징에는 크게 다섯 가지가 있습니다. 1차 캐시 (First Level Cache) 동일성 보장 (Identify) 쓰기 지연 (Write-behind) 변경 감지 (Dirty Checking) 지연 로딩 (Lazy Loading)본격적으로..." }, { "title": "[Spring] 스프링 AOP 초간단 예제 (애노테이션 기반)", "url": "/posts/spring-core-bean/", "categories": "Spring, Core", "tags": "spring, aop", "date": "2020-01-04 23:33:00 +0900", "snippet": "Aspect는 어떻게 적용될까요? 출처 : https://stackoverflow.com/questions/29650355/why-in-spring-aop-the-object-are-wrapped-into-a-jdk-proxy-that-implements-interfAOP 란 Aspect Oriented Programming의 약자로 우리말로는 관점 지향 프로그래밍 이라 합니다.관점이라는 말이 어렵게 느껴진다면 관심사에 따라 기능을 분리하여 모듈화하여 개발하는 개념이라고 생각해 볼 수 있습니다.여러 메소드에 비즈니스 로직과 크..." }, { "title": "[Spring] 스프링프레임워크 Bean 등록과 사용의 변천사", "url": "/posts/spring-core-aop/", "categories": "Spring, Core", "tags": "spring, bean", "date": "2020-01-02 23:37:00 +0900", "snippet": "요즘엔 스프링 부트를 주로 사용하기 때문에 XML로 스프링 어플리케이션을 설정할 일이 전혀 없지만스프링을 처음으로 접하는 개발자에게 간단하게나마 설명을 하기 위해 간단히 샘플 코드를 작성해 보았습니다.샘플 코드가 코틀린 기반이라 자바 기반 코드와 조금 다른 점이 있으니 참고하시게 되면 주의해주시기 바랍니다.XML 설정으로 Bean 등록과 사용초창기 사용 방법으로 일일히 빈을 등록하는 XML 설정에 등록할 빈을 정의합니다.클래스를 생성할 때 마다 빈으로 등록하기 위한 XML 작업이 많아지는 불편함이 있고 IDE 기능이 없다면 매..." } ]
